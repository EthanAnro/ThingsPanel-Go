name: Build and Release

on:
  #push:
  #  branches: [ "main" ]
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag name'
        required: false
        default: 'latest'

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up Go
      uses: actions/setup-go@v2
      with:
        go-version: 1.23

    - name: Build and package for Windows x86_64
      run: |
        CGO_ENABLED=0 GOOS=windows GOARCH=amd64 go build -o thingspanel-backend-community-windows-x86_64.exe
        zip thingspanel-backend-community-windows-x86_64.zip thingspanel-backend-community-windows-x86_64.exe configs sql files

    - name: Build and package for Linux x86_64
      run: |
        CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -o thingspanel-backend-community-linux-x86_64
        tar -czvf thingspanel-backend-community-linux-x86_64.tar.gz thingspanel-backend-community-linux-x86_64 configs sql files

    - name: Build and package for Linux ARM64 (AArch64)
      run: |
        CGO_ENABLED=0 GOOS=linux GOARCH=arm64 go build -o thingspanel-backend-community-linux-arm64
        tar -czvf thingspanel-backend-community-linux-arm64.tar.gz thingspanel-backend-community-linux-arm64 configs sql files

    - name: Build and package for macOS
      run: |
        CGO_ENABLED=0 GOOS=darwin GOARCH=amd64 go build -o thingspanel-backend-community-darwin-x64
        zip thingspanel-backend-community-darwin-x64.zip thingspanel-backend-community-darwin-x64 configs sql files

    - name: Determine Release Tag
      id: determine-tag
      run: echo "RELEASE_TAG=$(if [ '${{ github.event_name }}' == 'push' ]; then echo 'latest'; else echo '${{ github.event.inputs.tag }}'; fi)" >> $GITHUB_ENV

    - name: Delete existing release if it exists
      id: delete_release
      run: |
        tag=${{ github.event.inputs.tag || 'latest' }}
        release_id=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          "https://api.github.com/repos/${{ github.repository }}/releases/tags/$tag" | \
          jq -r '.id')
        if [ "$release_id" != "null" ]; then
          echo "Deleting existing release with ID $release_id"
          curl -s -X DELETE -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/releases/$release_id"
        else
          echo "No existing release found for tag ${{ github.event.inputs.tag }}"
        fi

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
          tag_name: ${{ github.event.inputs.tag  || 'latest' }}
          release_name: Release ${{ github.event.inputs.tag  || 'latest' }}
          body: Release created by GitHub Actions. Tag ${{ github.event.inputs.tag  || 'latest' }}
          draft: false
          prerelease: false

    - name: Upload Release Asset
      id: upload-release-asset
      uses: actions/upload-release-asset@v1
      env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: |
          ./thingspanel-backend-community-windows-x86_64.zip
          ./thingspanel-backend-community-linux-x86_64.tar.gz
          ./thingspanel-backend-community-linux-arm64.tar.gz
          ./thingspanel-backend-community-darwin-x64.zip
        asset_name: |
          thingspanel-backend-community-windows-x86_64.zip
          thingspanel-backend-community-linux-x86_64.tar.gz
          thingspanel-backend-community-linux-arm64.tar.gz
          thingspanel-backend-community-darwin-x64.zip
        asset_content_type: |
          application/zip
          application/gzip
          application/gzip
          application/zip

